// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: platformer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Platformer {
  public static partial class Platformer
  {
    static readonly string __ServiceName = "platformer.Platformer";

    static readonly grpc::Marshaller<global::Platformer.ConnectRequest> __Marshaller_platformer_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Platformer.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Platformer.ConnectResponse> __Marshaller_platformer_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Platformer.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Platformer.PlayerPositionById> __Marshaller_platformer_PlayerPositionById = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Platformer.PlayerPositionById.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Platformer.StreamResponse> __Marshaller_platformer_StreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Platformer.StreamResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Platformer.ConnectRequest, global::Platformer.ConnectResponse> __Method_Connect = new grpc::Method<global::Platformer.ConnectRequest, global::Platformer.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_platformer_ConnectRequest,
        __Marshaller_platformer_ConnectResponse);

    static readonly grpc::Method<global::Platformer.PlayerPositionById, global::Platformer.StreamResponse> __Method_Stream = new grpc::Method<global::Platformer.PlayerPositionById, global::Platformer.StreamResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Stream",
        __Marshaller_platformer_PlayerPositionById,
        __Marshaller_platformer_StreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Platformer.PlatformerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Platformer</summary>
    public abstract partial class PlatformerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Platformer.ConnectResponse> Connect(global::Platformer.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Stream(grpc::IAsyncStreamReader<global::Platformer.PlayerPositionById> requestStream, grpc::IServerStreamWriter<global::Platformer.StreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Platformer</summary>
    public partial class PlatformerClient : grpc::ClientBase<PlatformerClient>
    {
      /// <summary>Creates a new client for Platformer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PlatformerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Platformer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PlatformerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PlatformerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PlatformerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Platformer.ConnectResponse Connect(global::Platformer.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Platformer.ConnectResponse Connect(global::Platformer.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Platformer.ConnectResponse> ConnectAsync(global::Platformer.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Platformer.ConnectResponse> ConnectAsync(global::Platformer.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Platformer.PlayerPositionById, global::Platformer.StreamResponse> Stream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Platformer.PlayerPositionById, global::Platformer.StreamResponse> Stream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Stream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PlatformerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PlatformerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PlatformerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Stream, serviceImpl.Stream).Build();
    }

  }
}
#endregion
