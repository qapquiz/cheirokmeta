// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chatpb/chat.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Chat {
  public static partial class Chat
  {
    static readonly string __ServiceName = "chat.Chat";

    static readonly grpc::Marshaller<global::Chat.LoginRequest> __Marshaller_chat_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.LoginResponse> __Marshaller_chat_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.LogoutRequest> __Marshaller_chat_LogoutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.LogoutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.LogoutResponse> __Marshaller_chat_LogoutResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.LogoutResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.StreamRequest> __Marshaller_chat_StreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.StreamRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Chat.StreamResponse> __Marshaller_chat_StreamResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Chat.StreamResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Chat.LoginRequest, global::Chat.LoginResponse> __Method_Login = new grpc::Method<global::Chat.LoginRequest, global::Chat.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_chat_LoginRequest,
        __Marshaller_chat_LoginResponse);

    static readonly grpc::Method<global::Chat.LogoutRequest, global::Chat.LogoutResponse> __Method_Logout = new grpc::Method<global::Chat.LogoutRequest, global::Chat.LogoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_chat_LogoutRequest,
        __Marshaller_chat_LogoutResponse);

    static readonly grpc::Method<global::Chat.StreamRequest, global::Chat.StreamResponse> __Method_Stream = new grpc::Method<global::Chat.StreamRequest, global::Chat.StreamResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Stream",
        __Marshaller_chat_StreamRequest,
        __Marshaller_chat_StreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Chat.ChatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Chat</summary>
    public abstract partial class ChatBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Chat.LoginResponse> Login(global::Chat.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Chat.LogoutResponse> Logout(global::Chat.LogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Stream(grpc::IAsyncStreamReader<global::Chat.StreamRequest> requestStream, grpc::IServerStreamWriter<global::Chat.StreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Chat</summary>
    public partial class ChatClient : grpc::ClientBase<ChatClient>
    {
      /// <summary>Creates a new client for Chat</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Chat that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Chat.LoginResponse Login(global::Chat.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.LoginResponse Login(global::Chat.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.LoginResponse> LoginAsync(global::Chat.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.LoginResponse> LoginAsync(global::Chat.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Login, null, options, request);
      }
      public virtual global::Chat.LogoutResponse Logout(global::Chat.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Chat.LogoutResponse Logout(global::Chat.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.LogoutResponse> LogoutAsync(global::Chat.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Chat.LogoutResponse> LogoutAsync(global::Chat.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Chat.StreamRequest, global::Chat.StreamResponse> Stream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Chat.StreamRequest, global::Chat.StreamResponse> Stream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Stream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_Stream, serviceImpl.Stream).Build();
    }

  }
}
#endregion
